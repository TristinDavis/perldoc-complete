#!/usr/bin/env perl
use strict;
use File::Spec::Functions qw( rel2abs catdir no_upwards );

# There is only one tricky bit here: when there is only one completion, bash
# will take that and append a space. But when completing to Foo:: we want bash
# to leave the caret right after the :: and to make it do so, we make up a fake
# 'Foo:: ' suggestion in `suggestion_from_name` to create artificial ambiguity.
# However, if we also have a plain Foo suggestion anyway, then there is already
# ambiguity and we can throw the fake suggestion away in `uniq`.

sub uniq { my %seen; grep { ++$seen{$_.':: '}; not $seen{$_}++ } @_ }

sub get_completion_word {
	my $comp = substr $ENV{'COMP_LINE'}, 0, $ENV{'COMP_POINT'};
	$comp =~ s/.*\h//;
	return $comp;
}

sub slurp_dir {
	opendir my $dir, shift or return;
	no_upwards readdir $dir;
}

sub suggestion_from_name {
	my ( $file_rx, $path, $name ) = @_;
	return if not $name =~ /$file_rx/;
	return $name.'::', $name.':: ' if -d catdir $path, $name;
	return $1;
}

sub suggestions_from_path {
	my ( $file_rx, $path ) = @_;
	map { suggestion_from_name $file_rx, $path, $_ } slurp_dir $path;
}

sub usage {
	die map "\n$_\n", (
		"To use, issue the following command in bash:",
		"\tcomplete -C perldoc-complete perldoc",
		"You probably want to put that line in your ~/.bashrc file.\n",
	);
}

usage() if not exists $ENV{'COMP_LINE'};

my $pkg = get_completion_word();
my @segment = split /::|:\z/, $pkg, -1;
my $file_rx = qr/\A(${\quotemeta pop @segment}\w*)(?:\.pm|\.pod)?\z/;

my $home = rel2abs $ENV{'HOME'};

# if the package ended in a single colon,
# then prepend a colon to all suggestions
my ( $pfx ) = $pkg =~ /(?<!:)(:)\z/;

print "$pfx$_\n" for
	uniq
	sort
	map  { suggestions_from_path $file_rx, $_ }
	uniq
	map  { catdir $_, @segment }
	grep { $home ne rel2abs $_ }
	@INC;
